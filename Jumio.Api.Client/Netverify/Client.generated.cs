//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Jumio.Api;
using System.Collections.Generic;
using System.Net.Http;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Jumio.Api.Netverify
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IClient
    {
        /// <summary>Create a transaction for user</summary>
        /// <param name="body">The body of your initiate API request allows you to: specify what user information is captured and by which method; indicate where the user should be directed after the user journey; provide your own internal tracking information for the user and transaction; select the language to be displayed; preset options to enhance the user journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConnectionSettings> InitiateAsync(UserSettings body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a transaction for user</summary>
        /// <param name="body">The body of your initiate API request allows you to: specify what user information is captured and by which method; indicate where the user should be directed after the user journey; provide your own internal tracking information for the user and transaction; select the language to be displayed; preset options to enhance the user journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConnectionSettings> InitiateAsync(UserSettings body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Offers a Restful ID verification API without Jumio-hosted user interface.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanReference> SubmitAsync(UploadScan body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Offers a Restful ID verification API without Jumio-hosted user interface.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanReference> SubmitAsync(UploadScan body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive the status of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanStatus> GetScanStatusAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive the status of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanStatus> GetScanStatusAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Removes sensitive data and image(s) of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScanAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes sensitive data and image(s) of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScanAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive document, transaction and verification details of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanDetails> GetScanDataAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive document, transaction and verification details of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanDetails> GetScanDataAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive document related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanDocumentData> GetScanDocumentDataOnlyAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive document related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanDocumentData> GetScanDocumentDataOnlyAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanTransactionData> GetScanTransactionDataOnlyAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanTransactionData> GetScanTransactionDataOnlyAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanVerificationData> GetScanVerificationDataOnlyAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScanVerificationData> GetScanVerificationDataOnlyAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Images> GetScanImagesAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Images> GetScanImagesAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <param name="classifier">Classifies type of image to retrieve</param>
        /// <param name="maskhint">To receive the unmasked credit card image, append the query parameter maskhint=unmasked. By default, retrieval of unmasked credit card images is disabled (HTTP status code 403 Forbidden). If you want to enable it please contact Jumio Support. Retrieving unmasked credit card images might impose additional security requirements on your systems depending if you already store/transmit/process credit card data on your systems</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetScanImageAsync(System.Guid scanReference, Classifier classifier, Maskhint? maskhint);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <param name="classifier">Classifies type of image to retrieve</param>
        /// <param name="maskhint">To receive the unmasked credit card image, append the query parameter maskhint=unmasked. By default, retrieval of unmasked credit card images is disabled (HTTP status code 403 Forbidden). If you want to enable it please contact Jumio Support. Retrieving unmasked credit card images might impose additional security requirements on your systems depending if you already store/transmit/process credit card data on your systems</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetScanImageAsync(System.Guid scanReference, Classifier classifier, Maskhint? maskhint, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive the status of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentStatus> GetDocStatusAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive the status of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentStatus> GetDocStatusAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Removes sensitive data and image(s) of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScan2Async(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes sensitive data and image(s) of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScan2Async(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive document, transaction and verification details of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentDetails> GetDocumentDataAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive document, transaction and verification details of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocumentDetails> GetDocumentDataAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive document related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocDocumentData> GetDocumentsDocumentDataOnlyAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive document related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocDocumentData> GetDocumentsDocumentDataOnlyAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocTransactionData> GetDocumentsTransactionDataOnlyAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DocTransactionData> GetDocumentsTransactionDataOnlyAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Images> GetDocImagesAsync(System.Guid scanReference);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Images> GetDocImagesAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <param name="classifier">Classifies type of image to retrieve</param>
        /// <param name="maskhint">To receive the unmasked credit card image, append the query parameter maskhint=unmasked. By default, retrieval of unmasked credit card images is disabled (HTTP status code 403 Forbidden). If you want to enable it please contact Jumio Support. Retrieving unmasked credit card images might impose additional security requirements on your systems depending if you already store/transmit/process credit card data on your systems</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetDocImageAsync(System.Guid scanReference, Classifier classifier, Maskhint? maskhint);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <param name="classifier">Classifies type of image to retrieve</param>
        /// <param name="maskhint">To receive the unmasked credit card image, append the query parameter maskhint=unmasked. By default, retrieval of unmasked credit card images is disabled (HTTP status code 403 Forbidden). If you want to enable it please contact Jumio Support. Retrieving unmasked credit card images might impose additional security requirements on your systems depending if you already store/transmit/process credit card data on your systems</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetDocImageAsync(System.Guid scanReference, Classifier classifier, Maskhint? maskhint, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class Client : ClientBase, IClient
    {
        private HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(Configuration configuration, HttpClient httpClient) : base(configuration)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
    
       
        partial void PrepareRequest(HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, System.Net.Http.HttpResponseMessage response);
        /// <summary>Create a transaction for user</summary>
        /// <param name="body">The body of your initiate API request allows you to: specify what user information is captured and by which method; indicate where the user should be directed after the user journey; provide your own internal tracking information for the user and transaction; select the language to be displayed; preset options to enhance the user journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ConnectionSettings> InitiateAsync(UserSettings body)
        {
            return InitiateAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Create a transaction for user</summary>
        /// <param name="body">The body of your initiate API request allows you to: specify what user information is captured and by which method; indicate where the user should be directed after the user journey; provide your own internal tracking information for the user and transaction; select the language to be displayed; preset options to enhance the user journey.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ConnectionSettings> InitiateAsync(UserSettings body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/v4/initiate");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ConnectionSettings>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Offers a Restful ID verification API without Jumio-hosted user interface.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanReference> SubmitAsync(UploadScan body)
        {
            return SubmitAsync(body, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Offers a Restful ID verification API without Jumio-hosted user interface.</summary>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ScanReference> SubmitAsync(UploadScan body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/performNetverify");
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScanReference>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive the status of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanStatus> GetScanStatusAsync(System.Guid scanReference)
        {
            return GetScanStatusAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive the status of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ScanStatus> GetScanStatusAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/scans/{scanReference}");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScanStatus>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Removes sensitive data and image(s) of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteScanAsync(System.Guid scanReference)
        {
            return DeleteScanAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes sensitive data and image(s) of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteScanAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/scans/{scanReference}");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive document, transaction and verification details of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanDetails> GetScanDataAsync(System.Guid scanReference)
        {
            return GetScanDataAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive document, transaction and verification details of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ScanDetails> GetScanDataAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/scans/{scanReference}/data");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScanDetails>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive document related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanDocumentData> GetScanDocumentDataOnlyAsync(System.Guid scanReference)
        {
            return GetScanDocumentDataOnlyAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive document related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ScanDocumentData> GetScanDocumentDataOnlyAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/scans/{scanReference}/data/document");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScanDocumentData>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanTransactionData> GetScanTransactionDataOnlyAsync(System.Guid scanReference)
        {
            return GetScanTransactionDataOnlyAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ScanTransactionData> GetScanTransactionDataOnlyAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/scans/{scanReference}/data/transaction");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScanTransactionData>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanVerificationData> GetScanVerificationDataOnlyAsync(System.Guid scanReference)
        {
            return GetScanVerificationDataOnlyAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ScanVerificationData> GetScanVerificationDataOnlyAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/scans/{scanReference}/data/verification");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ScanVerificationData>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Images> GetScanImagesAsync(System.Guid scanReference)
        {
            return GetScanImagesAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Images> GetScanImagesAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/scans/{scanReference}/images");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Images>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <param name="classifier">Classifies type of image to retrieve</param>
        /// <param name="maskhint">To receive the unmasked credit card image, append the query parameter maskhint=unmasked. By default, retrieval of unmasked credit card images is disabled (HTTP status code 403 Forbidden). If you want to enable it please contact Jumio Support. Retrieving unmasked credit card images might impose additional security requirements on your systems depending if you already store/transmit/process credit card data on your systems</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> GetScanImageAsync(System.Guid scanReference, Classifier classifier, Maskhint? maskhint)
        {
            return GetScanImageAsync(scanReference, classifier, maskhint, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <param name="classifier">Classifies type of image to retrieve</param>
        /// <param name="maskhint">To receive the unmasked credit card image, append the query parameter maskhint=unmasked. By default, retrieval of unmasked credit card images is disabled (HTTP status code 403 Forbidden). If you want to enable it please contact Jumio Support. Retrieving unmasked credit card images might impose additional security requirements on your systems depending if you already store/transmit/process credit card data on your systems</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> GetScanImageAsync(System.Guid scanReference, Classifier classifier, Maskhint? maskhint, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            if (classifier == null)
                throw new System.ArgumentNullException("classifier");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/scans/{scanReference}/images/{classifier}?");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{classifier}", System.Uri.EscapeDataString(ConvertToString(classifier, System.Globalization.CultureInfo.InvariantCulture)));
            if (maskhint != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maskhint") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maskhint, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("image/*"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive the status of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DocumentStatus> GetDocStatusAsync(System.Guid scanReference)
        {
            return GetDocStatusAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive the status of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DocumentStatus> GetDocStatusAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/documents/{scanReference}");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentStatus>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Removes sensitive data and image(s) of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteScan2Async(System.Guid scanReference)
        {
            return DeleteScan2Async(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Removes sensitive data and image(s) of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteScan2Async(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/documents/{scanReference}");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive document, transaction and verification details of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DocumentDetails> GetDocumentDataAsync(System.Guid scanReference)
        {
            return GetDocumentDataAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive document, transaction and verification details of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DocumentDetails> GetDocumentDataAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/documents/{scanReference}/data");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentDetails>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive document related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DocDocumentData> GetDocumentsDocumentDataOnlyAsync(System.Guid scanReference)
        {
            return GetDocumentsDocumentDataOnlyAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive document related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DocDocumentData> GetDocumentsDocumentDataOnlyAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/documents/{scanReference}/data/document");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocDocumentData>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DocTransactionData> GetDocumentsTransactionDataOnlyAsync(System.Guid scanReference)
        {
            return GetDocumentsTransactionDataOnlyAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive transaction related data of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DocTransactionData> GetDocumentsTransactionDataOnlyAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/documents/{scanReference}/data/transaction");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocTransactionData>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Images> GetDocImagesAsync(System.Guid scanReference)
        {
            return GetDocImagesAsync(scanReference, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Images> GetDocImagesAsync(System.Guid scanReference, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/documents/{scanReference}/images");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Images>(response_, headers_).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <param name="classifier">Classifies type of image to retrieve</param>
        /// <param name="maskhint">To receive the unmasked credit card image, append the query parameter maskhint=unmasked. By default, retrieval of unmasked credit card images is disabled (HTTP status code 403 Forbidden). If you want to enable it please contact Jumio Support. Retrieving unmasked credit card images might impose additional security requirements on your systems depending if you already store/transmit/process credit card data on your systems</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> GetDocImageAsync(System.Guid scanReference, Classifier classifier, Maskhint? maskhint)
        {
            return GetDocImageAsync(scanReference, classifier, maskhint, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Receive available images of a scan by specifying the Jumio scan reference as a path parameter.</summary>
        /// <param name="scanReference">Reference to a specific scan for retrieving or deleting</param>
        /// <param name="classifier">Classifies type of image to retrieve</param>
        /// <param name="maskhint">To receive the unmasked credit card image, append the query parameter maskhint=unmasked. By default, retrieval of unmasked credit card images is disabled (HTTP status code 403 Forbidden). If you want to enable it please contact Jumio Support. Retrieving unmasked credit card images might impose additional security requirements on your systems depending if you already store/transmit/process credit card data on your systems</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> GetDocImageAsync(System.Guid scanReference, Classifier classifier, Maskhint? maskhint, System.Threading.CancellationToken cancellationToken)
        {
            if (scanReference == null)
                throw new System.ArgumentNullException("scanReference");
    
            if (classifier == null)
                throw new System.ArgumentNullException("classifier");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("api/netverify/v2/documents/{scanReference}/images/{classifier}?");
            urlBuilder_.Replace("{scanReference}", System.Uri.EscapeDataString(ConvertToString(scanReference, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{classifier}", System.Uri.EscapeDataString(ConvertToString(classifier, System.Globalization.CultureInfo.InvariantCulture)));
            if (maskhint != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maskhint") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maskhint, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("image/*"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
    
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_); 
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }
        
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserSettings 
    {
        [Newtonsoft.Json.JsonProperty("customerInternalReference", Required = Newtonsoft.Json.Required.Always)]
        public string CustomerInternalReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("userReference", Required = Newtonsoft.Json.Required.Always)]
        public string UserReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reportingCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportingCriteria { get; set; }
    
        [Newtonsoft.Json.JsonProperty("successUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SuccessUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("errorUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("callbackUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackUrl { get; set; }
    
        /// <summary>Acquisition workflows allow you to set a combination of verification and capture method options</summary>
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserSettingsWorkflowId WorkflowId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("presets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Preset> Presets { get; set; }
    
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserSettingsLocale Locale { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tokenLifetimeInMinutes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double TokenLifetimeInMinutes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>For ID verification: index is 1, required fields are country and type; for identify verification index is 2 and required field is phrase </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Preset 
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public int Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PresetType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("phrase", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phrase { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>JSON object containing the information about connection.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConnectionSettings 
    {
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Timestamp { get; set; }
    
        /// <summary>URL used to load the Netverify client.</summary>
        [Newtonsoft.Json.JsonProperty("redirectUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RedirectUrl { get; set; }
    
        /// <summary>Jumio reference number for the transaction.</summary>
        [Newtonsoft.Json.JsonProperty("transactionReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid TransactionReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UploadScan 
    {
        /// <summary>Your reference for each scan must not contain sensitive data like PII (Personally Identifiable Information) or account login</summary>
        [Newtonsoft.Json.JsonProperty("merchantIdScanReference", Required = Newtonsoft.Json.Required.Always)]
        public string MerchantIdScanReference { get; set; }
    
        /// <summary>Base64 encoded image of ID front side</summary>
        [Newtonsoft.Json.JsonProperty("frontsideImage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FrontsideImage { get; set; }
    
        /// <summary>Mandatory if Face match enabled. Base64 encoded image of face</summary>
        [Newtonsoft.Json.JsonProperty("faceImage", Required = Newtonsoft.Json.Required.Always)]
        public string FaceImage { get; set; }
    
        /// <summary>Possible countries: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idType", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadScanIdType IdType { get; set; }
    
        /// <summary>Mime type of front side image</summary>
        [Newtonsoft.Json.JsonProperty("frontsideImageMimeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadScanFrontsideImageMimeType FrontsideImageMimeType { get; set; }
    
        /// <summary>Mime type of face image</summary>
        [Newtonsoft.Json.JsonProperty("faceImageMimeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadScanFaceImageMimeType FaceImageMimeType { get; set; }
    
        /// <summary>Base64 encoded image of ID back side</summary>
        [Newtonsoft.Json.JsonProperty("backsideImage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BacksideImage { get; set; }
    
        /// <summary>Mime type of back side image</summary>
        [Newtonsoft.Json.JsonProperty("backsideImageMimeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadScanBacksideImageMimeType BacksideImageMimeType { get; set; }
    
        /// <summary>Defines fields which will be extracted during the ID verification. If a field is not listed in this parameter, it will not be processed for this transaction, regardless of customer portal settings. Note: Face match and Address extraction will not be processed unless enabled for your account. If you want to enable them, please contact your Customer Success Manager, or reach out to Jumio Support.</summary>
        [Newtonsoft.Json.JsonProperty("enabledFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnabledFields { get; set; }
    
        /// <summary>Your reporting criteria for each scan</summary>
        [Newtonsoft.Json.JsonProperty("merchantReportingCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReportingCriteria { get; set; }
    
        /// <summary>Identification of the customer must not contain sensitive data like PII (Personally Identificable Information) or account login</summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        /// <summary>Callback URL for the confirmation after the verification is completed</summary>
        [Newtonsoft.Json.JsonProperty("callbackUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackUrl { get; set; }
    
        /// <summary>First name of the customer</summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        /// <summary>Last name of the customer</summary>
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("usState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsState { get; set; }
    
        /// <summary>Date of expiry in the format YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("expiry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Expiry { get; set; }
    
        /// <summary>Identification number of the document</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        /// <summary>Date of birth in the format YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("dob", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Dob { get; set; }
    
        /// <summary>Possible values: onFinish (default): Callback is only sent after the whole verification; onAllSteps: Additional callback is sent when the images are received</summary>
        [Newtonsoft.Json.JsonProperty("callbackGranularity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UploadScanCallbackGranularity CallbackGranularity { get; set; }
    
        /// <summary>Personal number of the document</summary>
        [Newtonsoft.Json.JsonProperty("personalNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalNumber { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ScanReference 
    {
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Timestamp { get; set; }
    
        /// <summary>Jumio's reference number for each scan</summary>
        [Newtonsoft.Json.JsonProperty("jumioIdScanReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid JumioIdScanReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CommonDocumentModel 
    {
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Timestamp { get; set; }
    
        /// <summary>Jumio's reference number for each scan</summary>
        [Newtonsoft.Json.JsonProperty("scanReference", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid ScanReference { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ScanStatus : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScanStatusStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ScanDetails : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Always)]
        public ScanDocumentDataOnly Document { get; set; } = new ScanDocumentDataOnly();
    
        [Newtonsoft.Json.JsonProperty("transaction", Required = Newtonsoft.Json.Required.Always)]
        public ScanTransactionDataOnly Transaction { get; set; } = new ScanTransactionDataOnly();
    
        [Newtonsoft.Json.JsonProperty("verification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScanVerificationDataOnly Verification { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ScanDocumentDataOnly 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScanDocumentDataOnlyStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScanDocumentDataOnlyType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idSubtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScanDocumentDataOnlyIdSubtype IdSubtype { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuingCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dob", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Dob { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expiry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Expiry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssuingDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("usState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personalNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("optionalData1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionalData1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("optionalData2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionalData2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingAuthority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuingAuthority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingPlace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuingPlace { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class USAddressFormat 
    {
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        /// <summary>ISO 3166-2</summary>
        [Newtonsoft.Json.JsonProperty("stateCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StateCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streetName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetName { get; set; }
    
        /// <summary>Street suffix abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("streetSuffix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetSuffix { get; set; }
    
        /// <summary>Street direction abbreviation</summary>
        [Newtonsoft.Json.JsonProperty("streetDirection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetDirection { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streetNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber { get; set; }
    
        /// <summary>Unit designator abbreviation. Examples: US, Canada, Australia </summary>
        [Newtonsoft.Json.JsonProperty("unitDesignator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitDesignator { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unitNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zip { get; set; }
    
        [Newtonsoft.Json.JsonProperty("zipExtension", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipExtension { get; set; }
    
        /// <summary>ISO 3166-1 alpha-3</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class EUAddressFormat 
    {
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        [Newtonsoft.Json.JsonProperty("province", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Province { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streetName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("streetNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("unitDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UnitDetails { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>ISO 3166-1 alpha-3</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RawAddressFormat 
    {
        [Newtonsoft.Json.JsonProperty("line1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("line2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("line3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("line4", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line4 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("line5", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line5 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("postalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PostalCode { get; set; }
    
        /// <summary>ISO 3166-1 alpha-3</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ScanTransactionDataOnly 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScanTransactionDataOnlyStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clientIp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientIp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantScanReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantScanReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantReportingCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReportingCriteria { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ScanVerificationDataOnly 
    {
        [Newtonsoft.Json.JsonProperty("mrzCheck", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MrzCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejectReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RejectReason RejectReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identityVerification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentifyVerification IdentityVerification { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RejectReason 
    {
        [Newtonsoft.Json.JsonProperty("rejectReasonCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectReasonCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejectReasonDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectReasonDescription { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejectReasonDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RejectReasonDetails RejectReasonDetails { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RejectReasonDetails 
    {
        [Newtonsoft.Json.JsonProperty("detailsCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailsCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("detailsDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DetailsDescription { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IdentifyVerification 
    {
        [Newtonsoft.Json.JsonProperty("similarity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentifyVerificationSimilarity Similarity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentifyVerificationValidity Validity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentifyVerificationReason Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("handwrittenNoteMatches", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IdentifyVerificationHandwrittenNoteMatches HandwrittenNoteMatches { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ScanDocumentData : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScanDocumentDataOnlyStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScanDocumentDataOnlyType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idSubtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScanDocumentDataOnlyIdSubtype IdSubtype { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuingCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dob", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Dob { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expiry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Expiry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssuingDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("usState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UsState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personalNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("optionalData1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionalData1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("optionalData2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionalData2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingAuthority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuingAuthority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingPlace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuingPlace { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ScanTransactionData : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScanTransactionDataOnlyStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        public System.DateTimeOffset Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clientIp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientIp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantScanReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantScanReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantReportingCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReportingCriteria { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ScanVerificationData : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("mrzCheck", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MrzCheck { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejectReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RejectReason RejectReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identityVerification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentifyVerification IdentityVerification { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Images : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Image> Images1 { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Image 
    {
        [Newtonsoft.Json.JsonProperty("classifier", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageClassifier Classifier { get; set; }
    
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.Always)]
        public string Href { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maskhint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maskhint { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocumentStatus : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentStatusStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocumentDetails : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Always)]
        public DocDocumentDataOnly Document { get; set; } = new DocDocumentDataOnly();
    
        [Newtonsoft.Json.JsonProperty("transaction", Required = Newtonsoft.Json.Required.Always)]
        public DocTransactionDataOnly Transaction { get; set; } = new DocTransactionDataOnly();
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocDocumentDataOnly 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocDocumentDataOnlyStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocDocumentDataOnlyType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originalDocument", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalDocument { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customDocumentCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomDocumentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extractedData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtractedData ExtractedData { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExtractedData 
    {
        /// <summary>'true' if signature available, otherwise 'false'</summary>
        [Newtonsoft.Json.JsonProperty("signatureAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignatureAvailable { get; set; }
    
        /// <summary>Social security number if readable</summary>
        [Newtonsoft.Json.JsonProperty("ssn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }
    
        /// <summary>BIC/SWIFT code</summary>
        [Newtonsoft.Json.JsonProperty("swiftCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SwiftCode { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocTransactionDataOnly 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocTransactionDataOnlyStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocTransactionDataOnlySource Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantScanReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantScanReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantReportingCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReportingCriteria { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocDocumentData : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocDocumentDataOnlyStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocDocumentDataOnlyType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originalDocument", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalDocument { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customDocumentCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomDocumentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extractedData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtractedData ExtractedData { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocTransactionData : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocTransactionDataOnlyStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocTransactionDataOnlySource Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantScanReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantScanReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantReportingCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReportingCriteria { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CallbackModel 
    {
        [Newtonsoft.Json.JsonProperty("callBackType", Required = Newtonsoft.Json.Required.Always)]
        public string CallBackType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("jumioIdScanReference", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.Guid? JumioIdScanReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("verificationStatus", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackModelVerificationStatus VerificationStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idScanStatus", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackModelIdScanStatus IdScanStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idScanSource", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackModelIdScanSource IdScanSource { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idCheckDataPositions", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IdCheckDataPositions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idCheckDocumentValidation", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IdCheckDocumentValidation { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idCheckHologram", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IdCheckHologram { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idCheckMRZcode", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IdCheckMRZcode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idCheckMicroprint", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IdCheckMicroprint { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idCheckSecurityFeatures", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IdCheckSecurityFeatures { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idCheckSignature", Required = Newtonsoft.Json.Required.AllowNull)]
        public string IdCheckSignature { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transactionDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset? TransactionDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("callbackDate", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset? CallbackDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("identityVerification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityVerification { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackModelIdType IdType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idSubtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackModelIdSubtype IdSubtype { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("rejectReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RejectReason RejectReason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idScanImage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri IdScanImage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idScanImageFace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri IdScanImageFace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idScanImageBackside", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri IdScanImageBackside { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idFirstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdFirstName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idLastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdLastName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idDob", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdDob { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idExpiry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IdExpiry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idUsState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdUsState { get; set; }
    
        [Newtonsoft.Json.JsonProperty("personalNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PersonalNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("idAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantIdScanReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantIdScanReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantReportingCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReportingCriteria { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("clientIp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientIp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("firstAttemptDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? FirstAttemptDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("optionalData1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionalData1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("optionalData2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionalData2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dni", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dni { get; set; }
    
        [Newtonsoft.Json.JsonProperty("curp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Curp { get; set; }
    
        [Newtonsoft.Json.JsonProperty("gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackModelGender Gender { get; set; }
    
        [Newtonsoft.Json.JsonProperty("presetCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PresetCountry { get; set; }
    
        [Newtonsoft.Json.JsonProperty("presetIdType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PresetIdType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dlCarPermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DlCarPermission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("dlCategories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DriverLicense DlCategories { get; set; }
    
        [Newtonsoft.Json.JsonProperty("nationality", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nationality { get; set; }
    
        [Newtonsoft.Json.JsonProperty("passportNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PassportNumber { get; set; }
    
        [Newtonsoft.Json.JsonProperty("durationOfStay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DurationOfStay { get; set; }
    
        [Newtonsoft.Json.JsonProperty("numberOfEntries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NumberOfEntries { get; set; }
    
        [Newtonsoft.Json.JsonProperty("visaCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VisaCategory { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originDob", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginDob { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingAuthority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuingAuthority { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuingDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issuingPlace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssuingPlace { get; set; }
    
        [Newtonsoft.Json.JsonProperty("livenessImages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LivenessImages { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CallbackIdentityVerification 
    {
        [Newtonsoft.Json.JsonProperty("similarity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackIdentityVerificationSimilarity Similarity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("validity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Validity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackIdentityVerificationReason Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("handwrittenNoteMatches", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HandwrittenNoteMatches { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DriverLicense 
    {
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DriverLicenseCategory Category { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isReadable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsReadable { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DocVerificationCallback : CommonDocumentModel
    {
        [Newtonsoft.Json.JsonProperty("transaction", Required = Newtonsoft.Json.Required.Always)]
        public CallbackTransaction Transaction { get; set; } = new CallbackTransaction();
    
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CallbackDocument Document { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CallbackTransaction 
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.AllowNull)]
        public System.DateTimeOffset? Date { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackTransactionStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackTransactionSource Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("merchantScanReference", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid MerchantScanReference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.Always)]
        public string CustomerId { get; set; }
    
        /// <summary>Your reporting criteria for each scan</summary>
        [Newtonsoft.Json.JsonProperty("merchantReportingCriteria", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReportingCriteria { get; set; }
    
        /// <summary>IP address of the client if provided for the Document Verification API</summary>
        [Newtonsoft.Json.JsonProperty("clientIp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ClientIp { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CallbackDocument 
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackDocumentStatus Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CallbackDocumentType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.Always)]
        public IList<System.Uri> Images { get; set; } = new List<System.Uri>();
    
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        public string Country { get; set; }
    
        [Newtonsoft.Json.JsonProperty("originalDocument", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri OriginalDocument { get; set; }
    
        [Newtonsoft.Json.JsonProperty("customDocumentCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomDocumentCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extractedData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CallbackExtractedData ExtractedData { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CallbackExtractedData : ExtractedData
    {
        /// <summary>Full name if readable</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>Bank account number of the customer from a bank statement</summary>
        [Newtonsoft.Json.JsonProperty("accountNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumber { get; set; }
    
        /// <summary>Personal account number of credit card</summary>
        [Newtonsoft.Json.JsonProperty("pan", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pan { get; set; }
    
        /// <summary>Issue date in the format YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? IssueDate { get; set; }
    
        /// <summary>Date of expiry in the format YYYY-MM-DD</summary>
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ExpiryDate { get; set; }
    
        /// <summary>Social security number if readable</summary>
        [Newtonsoft.Json.JsonProperty("ssn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ssn { get; set; }
    
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Classifier
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"front")]
        Front = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"face")]
        Face = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"back")]
        Back = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Maskhint
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"masked")]
        Masked = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"unmasked")]
        Unmasked = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UserSettingsWorkflowId
    {
        _0 = 0,
    
        _100 = 100,
    
        _101 = 101,
    
        _102 = 102,
    
        _200 = 200,
    
        _201 = 201,
    
        _202 = 202,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UserSettingsLocale
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bg")]
        Bg = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cs")]
        Cs = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"da")]
        Da = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"de")]
        De = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"el")]
        El = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"en")]
        En = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"en-GB")]
        EnGB = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es")]
        Es = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"es-MX")]
        EsMX = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"et")]
        Et = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fi")]
        Fi = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"fr")]
        Fr = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"hu")]
        Hu = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"it")]
        It = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ja")]
        Ja = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ko")]
        Ko = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"lt")]
        Lt = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"nl")]
        Nl = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"no")]
        No = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pl")]
        Pl = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt")]
        Pt = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pt-BR")]
        PtBR = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ro")]
        Ro = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ru")]
        Ru = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sk")]
        Sk = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sv")]
        Sv = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tr")]
        Tr = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"vl")]
        Vl = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-CN")]
        ZhCN = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"zh-HK")]
        ZhHK = 30,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PresetType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DRIVING_LICENSE")]
        DRIVING_LICENSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID_CARD")]
        ID_CARD = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UploadScanIdType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DRIVING_LICENSE")]
        DRIVING_LICENSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID_CARD")]
        ID_CARD = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
        VISA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UploadScanFrontsideImageMimeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"image/jpeg")]
        Image_jpeg = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"image/png")]
        Image_png = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UploadScanFaceImageMimeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"image/jpeg")]
        Image_jpeg = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"image/png")]
        Image_png = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UploadScanBacksideImageMimeType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"image/jpeg")]
        Image_jpeg = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"image/png")]
        Image_png = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UploadScanCallbackGranularity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"onFinish")]
        OnFinish = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"onAllSteps")]
        OnAllSteps = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ScanStatusStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ScanDocumentDataOnlyStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED_VERIFIED")]
        APPROVED_VERIFIED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DENIED_FRAUD")]
        DENIED_FRAUD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DENIED_UNSUPPORTED_ID_TYPE")]
        DENIED_UNSUPPORTED_ID_TYPE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DENIED_UNSUPPORTED_ID_COUNTRY")]
        DENIED_UNSUPPORTED_ID_COUNTRY = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR_NOT_READABLE_ID")]
        ERROR_NOT_READABLE_ID = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_ID_UPLOADED")]
        NO_ID_UPLOADED = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ScanDocumentDataOnlyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DRIVING_LICENSE")]
        DRIVING_LICENSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID_CARD")]
        ID_CARD = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
        VISA = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNSUPPORTED")]
        UNSUPPORTED = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ScanDocumentDataOnlyIdSubtype
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NATIONAL_ID")]
        NATIONAL_ID = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSULAR_ID")]
        CONSULAR_ID = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ELECTORAL_ID")]
        ELECTORAL_ID = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESIDENT_PERMIT_ID")]
        RESIDENT_PERMIT_ID = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TAX_ID")]
        TAX_ID = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STUDENT_ID")]
        STUDENT_ID = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT_CARD_ID")]
        PASSPORT_CARD_ID = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MILITARY_ID")]
        MILITARY_ID = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUBLIC_SAFETY_ID")]
        PUBLIC_SAFETY_ID = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_ID")]
        OTHER_ID = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
        VISA = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 12,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ScanTransactionDataOnlyStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IdentifyVerificationSimilarity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MATCH")]
        MATCH = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_MATCH")]
        NO_MATCH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_POSSIBLE")]
        NOT_POSSIBLE = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IdentifyVerificationValidity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TRUE")]
        TRUE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FALSE")]
        FALSE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IdentifyVerificationReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELFIE_CROPPED_FROM_ID")]
        SELFIE_CROPPED_FROM_ID = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENTIRE_ID_USED_AS_SELFIE")]
        ENTIRE_ID_USED_AS_SELFIE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPLE_PEOPLE")]
        MULTIPLE_PEOPLE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELFIE_IS_SCREEN_PAPER_VIDEO")]
        SELFIE_IS_SCREEN_PAPER_VIDEO = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELFIE_MANIPULATED")]
        SELFIE_MANIPULATED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AGE_DIFFERENCE_TOO_BIG")]
        AGE_DIFFERENCE_TOO_BIG = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_FACE_PRESENT")]
        NO_FACE_PRESENT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FACE_NOT_FULLY_VISIBLE")]
        FACE_NOT_FULLY_VISIBLE = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_QUALITY")]
        BAD_QUALITY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLACK_AND_WHITE")]
        BLACK_AND_WHITE = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IdentifyVerificationHandwrittenNoteMatches
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TRUE")]
        TRUE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FALSE")]
        FALSE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ImageClassifier
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"front")]
        Front = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"face")]
        Face = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"back")]
        Back = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DocumentStatusStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DocDocumentDataOnlyStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPLOADED")]
        UPLOADED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXTRACTED")]
        EXTRACTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DISCARDED")]
        DISCARDED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DocDocumentDataOnlyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IC")]
        IC = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UB")]
        UB = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CAAP")]
        CAAP = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCS")]
        CCS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LAG")]
        LAG = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOAP")]
        LOAP = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MOAP")]
        MOAP = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VT")]
        VT = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STUC")]
        STUC = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HCC")]
        HCC = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CB")]
        CB = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENC")]
        SENC = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEDC")]
        MEDC = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BC")]
        BC = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WWCC")]
        WWCC = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TAC")]
        TAC = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEL")]
        SEL = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PB")]
        PB = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USSS")]
        USSS = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SSC")]
        SSC = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 27,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DocTransactionDataOnlyStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DocTransactionDataOnlySource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOC_API")]
        DOC_API = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOC_UPLOAD")]
        DOC_UPLOAD = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackModelVerificationStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED_VERIFIED")]
        APPROVED_VERIFIED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DENIED_FRAUD")]
        DENIED_FRAUD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DENIED_UNSUPPORTED_ID_TYPE")]
        DENIED_UNSUPPORTED_ID_TYPE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DENIED_UNSUPPORTED_ID_COUNTRY")]
        DENIED_UNSUPPORTED_ID_COUNTRY = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR_NOT_READABLE_ID")]
        ERROR_NOT_READABLE_ID = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_ID_UPLOADED")]
        NO_ID_UPLOADED = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackModelIdScanStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUCCESS")]
        SUCCESS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackModelIdScanSource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WEB")]
        WEB = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WEB_CAM")]
        WEB_CAM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WEB_UPLOAD")]
        WEB_UPLOAD = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REDIRECT")]
        REDIRECT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REDIRECT_CAM")]
        REDIRECT_CAM = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REDIRECT_UPLOAD")]
        REDIRECT_UPLOAD = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"API")]
        API = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SDK")]
        SDK = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackModelIdType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT")]
        PASSPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DRIVING_LICENSE")]
        DRIVING_LICENSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ID_CARD")]
        ID_CARD = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
        VISA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackModelIdSubtype
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NATIONAL_ID")]
        NATIONAL_ID = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONSULAR_ID")]
        CONSULAR_ID = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ELECTORAL_ID")]
        ELECTORAL_ID = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESIDENT_PERMIT_ID")]
        RESIDENT_PERMIT_ID = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TAX_ID")]
        TAX_ID = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STUDENT_ID")]
        STUDENT_ID = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PASSPORT_CARD_ID")]
        PASSPORT_CARD_ID = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MILITARY_ID")]
        MILITARY_ID = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUBLIC_SAFETY_ID")]
        PUBLIC_SAFETY_ID = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER_ID")]
        OTHER_ID = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VISA")]
        VISA = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LEARNING_DRIVING_LICENSE")]
        LEARNING_DRIVING_LICENSE = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"E_PASSPORT")]
        E_PASSPORT = 14,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackModelGender
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackIdentityVerificationSimilarity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MATCH")]
        MATCH = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_MATCH")]
        NO_MATCH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_POSSIBLE")]
        NOT_POSSIBLE = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackIdentityVerificationReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELFIE_CROPPED_FROM_ID")]
        SELFIE_CROPPED_FROM_ID = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ENTIRE_ID_USED_AS_SELFIE")]
        ENTIRE_ID_USED_AS_SELFIE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPLE_PEOPLE")]
        MULTIPLE_PEOPLE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELFIE_IS_SCREEN_PAPER_VIDEO")]
        SELFIE_IS_SCREEN_PAPER_VIDEO = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELFIE_MANIPULATED")]
        SELFIE_MANIPULATED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AGE_DIFFERENCE_TOO_BIG")]
        AGE_DIFFERENCE_TOO_BIG = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_FACE_PRESENT")]
        NO_FACE_PRESENT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FACE_NOT_FULLY_VISIBLE")]
        FACE_NOT_FULLY_VISIBLE = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BAD_QUALITY")]
        BAD_QUALITY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLACK_AND_WHITE")]
        BLACK_AND_WHITE = 10,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DriverLicenseCategory
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"B1")]
        B1 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BE")]
        BE = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackTransactionStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackTransactionSource
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOC_UPLOAD")]
        DOC_UPLOAD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOC_API")]
        DOC_API = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOC_SDK")]
        DOC_SDK = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackDocumentStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPLOADED")]
        UPLOADED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXTRACTED")]
        EXTRACTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DISCARDED")]
        DISCARDED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum CallbackDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNDEFINED")]
        UNDEFINED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CC")]
        CC = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BS")]
        BS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IC")]
        IC = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UB")]
        UB = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CAAP")]
        CAAP = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CRC")]
        CRC = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCS")]
        CCS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LAG")]
        LAG = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOAP")]
        LOAP = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MOAP")]
        MOAP = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TR")]
        TR = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VT")]
        VT = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VC")]
        VC = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"STUC")]
        STUC = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HCC")]
        HCC = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CB")]
        CB = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENC")]
        SENC = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MEDC")]
        MEDC = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BC")]
        BC = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WWCC")]
        WWCC = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SS")]
        SS = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TAC")]
        TAC = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SEL")]
        SEL = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PB")]
        PB = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USSS")]
        USSS = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SSC")]
        SSC = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 27,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.3.0 (Newtonsoft.Json v12.0.0.0)")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.1.0 (NJsonSchema v10.3.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108